

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>DaDevLog</title>
  <subtitle>아자아자 화이팅</subtitle>
  <updated>2025-02-02T02:52:40+09:00</updated>
  <author>
    <name>HaDaHyeon</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 HaDaHyeon </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Backend - Springboot] 백엔드 서버 배포 및 ci-cd</title>
    <link href="http://localhost:4000/posts/backend-cicd/" rel="alternate" type="text/html" title="[Backend - Springboot] 백엔드 서버 배포 및 ci-cd" />
    <published>2025-02-01T03:00:00+09:00</published>
  
    <updated>2025-02-01T03:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/backend-cicd/</id>
    <content type="text/html" src="http://localhost:4000/posts/backend-cicd/" />
    <author>
      <name>HaDaHyeon</name>
    </author>

  
    
    <category term="Backend" />
    
    <category term="Springboot" />
    
  

  <summary>1. 기본 서버 세팅

 aws 인스턴스 생성



 

펨키는 이때 밖에 다운로드 못하니 잘 간직하기

참고) 사진에는 handali-key가 펨키인데, 해당 인스턴스 지우고 다시 만들어서 handali-app-key라는 새로운 팸키를 사용중임



인스턴스 유형 잘 고려해서 선택하기, 무료로 제공하는 건 정말 간단한 프로젝트에서만 사용 가능, 현재는 t2.medium 사용중 (인스턴스만 몇 번을 중지했다 시작했다, 없앴다 만들었는 지 모름 ㅎ)






서버에 접속
퍼블릭 IPv4 주소: 43.201.250.84

펨키 파일 명 : handali-app-key.pem

chmod 400 handali-app-key.pem
ssh -i handali-app-key.pem ubuntu@43.201.2...</summary>

  </entry>

  
  <entry>
    <title>[Git&amp;GitHub - 기본개념] 이전 커밋으로 돌아가기_reset,revert</title>
    <link href="http://localhost:4000/posts/git-revert/" rel="alternate" type="text/html" title="[Git&amp;amp;GitHub - 기본개념] 이전 커밋으로 돌아가기_reset,revert" />
    <published>2025-01-15T14:10:00+09:00</published>
  
    <updated>2025-01-15T14:10:00+09:00</updated>
  
    <id>http://localhost:4000/posts/git-revert/</id>
    <content type="text/html" src="http://localhost:4000/posts/git-revert/" />
    <author>
      <name>HaDaHyeon</name>
    </author>

  
    
    <category term="Git&amp;GitHub" />
    
    <category term="기본개념" />
    
  

  <summary>Reset
커밋 히스토리를 되돌리고, 특정 커밋 시점의 상태로 돌아가게 함


  git log : 돌아갈 커밋의 해시를 복사
  
  
    git reset --hard {돌아갈 커밋의 해시} : 해당 커밋을 했던 시점의 코드로 변경됨, 해당 커밋 이후의 커밋은 사라짐(초기화)

     -- hard: working directory의 변경 사항도 모두 초기화
 -- soft: 커밋만 되돌리고, staging area&amp;amp;amp;working directory는 유지
 -- mixed: 커밋&amp;amp;amp;staging area 되돌리고, working directory는 유지
    
  




Revert
특정 커밋을 되돌리되, 기존 커밋 히스토리를 보존하면서 새로운 커밋을 생성


  git log...</summary>

  </entry>

  
  <entry>
    <title>[Old Blog] 네이버 블로그</title>
    <link href="http://localhost:4000/posts/oldblog/" rel="alternate" type="text/html" title="[Old Blog] 네이버 블로그" />
    <published>2025-01-09T18:10:00+09:00</published>
  
    <updated>2025-01-09T18:10:00+09:00</updated>
  
    <id>http://localhost:4000/posts/oldblog/</id>
    <content type="text/html" src="http://localhost:4000/posts/oldblog/" />
    <author>
      <name>HaDaHyeon</name>
    </author>

  
    
    <category term="Old Blog" />
    
  

  <summary>https://blog.naver.com/hada0413/</summary>

  </entry>

  
  <entry>
    <title>[Algorithm - 이론] 이분탐색(이진탐색)</title>
    <link href="http://localhost:4000/posts/algorithm-binarysearch/" rel="alternate" type="text/html" title="[Algorithm - 이론] 이분탐색(이진탐색)" />
    <published>2025-01-09T15:10:00+09:00</published>
  
    <updated>2025-01-09T15:10:00+09:00</updated>
  
    <id>http://localhost:4000/posts/algorithm-binarysearch/</id>
    <content type="text/html" src="http://localhost:4000/posts/algorithm-binarysearch/" />
    <author>
      <name>HaDaHyeon</name>
    </author>

  
    
    <category term="Algorithm" />
    
    <category term="이론" />
    
  

  <summary>기본 개념

  배열 내부의 값이 정렬이 되어 있을 때 사용 가능하다
  변수 3개(start, mid, end)를 이용하여 원하는 값을 찾는 알고리즘 이다
  시간복잡도: O(logN), n은 이분 탐색을 진행하는 리스트의 크기




반복문을 이용한 구현
def binarySearch(array, start, end, k):
    while start &amp;amp;lt;= end:
        mid = (start + end) // 2
        if array[mid] == k:
            return mid
        elif array[mid] &amp;amp;gt; k:
            end = mid - 1
        else:
            start = mid + 1
 ...</summary>

  </entry>

</feed>


